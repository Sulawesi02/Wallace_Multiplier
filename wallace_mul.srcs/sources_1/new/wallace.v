module wallace(x, y, out);
    input [7:0] x, y; // 输入x是被乘数，y是乘数
    output [15:0] out; // 输出乘积结果
    wire [63:0]a;//部分积
    wire [1:0] b0,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15;//第一级的输出,包含进位
    wire [1:0] c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15;//第二级的输出,包含进位
    wire [1:0] d0,d1,d2,d3,d4,d5,d6,d7,d8,d9;//第三级的输出,包含进位
    wire [1:0] e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10;//第四级的输出,包含进位

    wire [15:0] add_1,add_2;//第四极的输入(除去最低位)
    wire [15:0] out;//乘法器的输出(组合逻辑)
    
    //部分积
    assign a = {x[7],x[6],x[7],x[5],x[6],x[7],
    x[4],x[5],x[6],x[7],x[3],x[4],x[5],x[6],
    x[7],x[2],x[3],x[4],x[5],x[6],x[7],x[1],
    x[2],x[3],x[4],x[5],x[6],x[7],x[0],x[1],
    x[2],x[3],x[4],x[5],x[6],x[7],x[0],x[1],
    x[2],x[3],x[4],x[5],x[6],x[0],x[1],x[2],
    x[3],x[4],x[5],x[0],x[1],x[2],x[3],x[4],
    x[0],x[1],x[2],x[3],x[0],x[1],x[2],x[0]
    ,x[1],x[0]} & {y[7],y[7],y[6],y[7],y[6],y[5],
    y[7],y[6],y[5],y[4],y[7],y[6],y[5],y[4],
    y[3],y[7],y[6],y[5],y[4],y[3],y[2],y[7],
    y[6],y[5],y[4],y[3],y[2],y[1],y[7],y[6],
    y[5],y[4],y[3],y[2],y[1],y[0],y[6],y[5],
    y[4],y[3],y[2],y[1],y[0],y[5],y[4],y[3],
    y[2],y[1],y[0],y[4],y[3],y[2],y[1],y[0],
    y[3],y[2],y[1],y[0],y[2],y[1],y[0],y[1],
    y[0],y[0]};
    
    //第一级
    hadd U1(.x(a[1]),.y(a[2]),.out(b0)); 
    fadd U2(.x(a[3]),.y(a[4]),.z(a[5]),.out(b1));
    fadd U3(.x(a[6]),.y(a[7]),.z(a[8]),.out(b2));
    fadd U4(.x(a[10]),.y(a[11]),.z(a[12]),.out(b3));
    hadd U5(.x(a[13]),.y(a[14]),.out(b4));
    fadd U6(.x(a[15]),.y(a[16]),.z(a[17]),.out(b5));    
    fadd U7(.x(a[18]),.y(a[19]),.z(a[20]),.out(b6));
    fadd U8(.x(a[21]),.y(a[22]),.z(a[23]),.out(b7));
    fadd U9(.x(a[24]),.y(a[25]),.z(a[26]),.out(b8));
    fadd U10(.x(a[28]),.y(a[29]),.z(a[30]),.out(b9));
    fadd U11(.x(a[31]),.y(a[32]),.z(a[33]),.out(b10));
    hadd U13(.x(a[36]),.y(a[37]),.out(b11));
    fadd U14(.x(a[38]),.y(a[39]),.z(a[40]),.out(b12));
    fadd U15(.x(a[44]),.y(a[45]),.z(a[46]),.out(b13));
    fadd U16(.x(a[49]),.y(a[50]),.z(a[51]),.out(b14));
    hadd U17(.x(a[54]),.y(a[55]),.out(b15));

    //第二级
    hadd U18(.x(b1[0]),.y(b0[1]),.out(c0)); 
    fadd U19(.x(b2[0]),.y(b1[1]),.z(a[9]),.out(c1));
    fadd U20(.x(b3[0]),.y(b4[0]),.z(b2[1]),.out(c2));
    fadd U21(.x(b5[0]),.y(b6[0]),.z(b3[1]),.out(c3));
    fadd U22(.x(b7[0]),.y(b8[0]),.z(b5[1]),.out(c4));
    hadd U23(.x(b6[1]),.y(a[27]),.out(c5)); 
    fadd U24(.x(b9[0]),.y(b10[0]),.z(b7[1]),.out(c6));
    fadd U25(.x(b8[1]),.y(a[34]),.z(a[35]),.out(c7));
    fadd U26(.x(b11[0]),.y(b12[0]),.z(b9[1]),.out(c8));
    fadd U27(.x(b10[1]),.y(a[41]),.z(a[42]),.out(c9));
    fadd U28(.x(a[43]),.y(b13[0]),.z(b11[1]),.out(c10));
    fadd U29(.x(b12[1]),.y(a[47]),.z(a[48]),.out(c11));
    fadd U30(.x(b13[1]),.y(a[52]),.z(a[53]),.out(c12));
    fadd U31(.x(b14[1]),.y(a[56]),.z(a[57]),.out(c13));
    fadd U32(.x(a[58]),.y(a[59]),.z(a[60]),.out(c14));
    hadd U33(.x(a[61]),.y(a[62]),.out(c15)); 
    
    //第三级
    hadd U34(.x(c1[0]),.y(c0[1]),.out(d0)); 
    hadd U35(.x(c2[0]),.y(c1[1]),.out(d1)); 
    fadd U36(.x(c3[0]),.y(c2[1]),.z(b4[1]),.out(d2));
    fadd U37(.x(c4[0]),.y(c5[0]),.z(c3[1]),.out(d3));
    fadd U38(.x(c6[0]),.y(c7[0]),.z(c4[1]),.out(d4));
    fadd U39(.x(c8[0]),.y(c9[0]),.z(c6[1]),.out(d5));
    fadd U40(.x(c10[0]),.y(c11[0]),.z(c8[1]),.out(d6));
    fadd U41(.x(b14[0]),.y(c12[0]),.z(c10[1]),.out(d7));
    hadd U42(.x(b15[0]),.y(c13[0]),.out(d8)); 
    hadd U43(.x(b15[1]),.y(c14[0]),.out(d9)); 
    
    //第四级
    hadd U44(.x(d1[0]),.y(d0[1]),.out(e0)); 
    hadd U45(.x(d2[0]),.y(d1[1]),.out(e1)); 
    hadd U46(.x(d3[0]),.y(d2[1]),.out(e2)); 
    fadd U47(.x(d4[0]),.y(d3[1]),.z(c5[1]),.out(e3));
    fadd U48(.x(d5[0]),.y(d4[1]),.z(c7[1]),.out(e4));
    fadd U49(.x(d6[0]),.y(d5[1]),.z(c9[1]),.out(e5));
    fadd U50(.x(d7[0]),.y(d6[1]),.z(c11[1]),.out(e6));
    fadd U51(.x(d8[0]),.y(d7[1]),.z(c12[1]),.out(e7));
    fadd U52(.x(d9[0]),.y(d8[1]),.z(c13[1]),.out(e8));
    fadd U53(.x(d9[1]),.y(c15[0]),.z(c14[1]),.out(e9));
    hadd U54(.x(a[63]),.y(c15[1]),.out(e10)); 

    assign add_1 = {e10[1],e10[0],e9[0],e8[0],e7[0],e6[0],e5[0],e4[0],e3[0],e2[0],e1[0],e0[0],d0[0],c0[0],b0[0],a[0]};
    assign add_2 = {1'b0, e9[1],e8[1],e7[1],e6[1],e5[1],e4[1],e3[1],e2[1],e1[1],e0[1],5'b0};
    assign out = add_1 + add_2;
endmodule